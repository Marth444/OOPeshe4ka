#include <iostream>
using namespace std;

//Вопрос 29

//Перегрузка операций -> и ->* и концепция "умного указателя". 

//Если по-простому, умный указатель — это абстрактный тип данных, который имитирует указатель, 
//добавляя новый функционал, например автоматическое управление памятью и проверку границ. Умные указатели 
//задействуются для уменьшения количества багов, 
//возникающих в результате неправильного использования указателей. Эффективность при этом сохраняется.

//тут приведена концепция "умного указателя"
template<typename T>
class SmartPointer
{
	public:

		SmartPointer(T *ptr)
		{
			this->ptr = ptr;
			cout << "constructor" << endl;
		}

		~SmartPointer()
		{
			delete ptr;
			cout << "destructor" << endl;
		}

		T& operator* ()
		{
			return *ptr;
		}
	private:
		T* ptr;
};

//Перегрузка операций -> и ->*

int main()
{
	SmartPointer<int> pointer = new int(5);
	cout << *pointer << endl;
	*pointer = 11;
	cout << *pointer << endl;
	///////////////////////////////////////

}
